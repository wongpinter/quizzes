// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
	SearchMovies(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*MovieSearchResults, error)
	GetSingleMovieByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*MovieResponse, error)
	GetSingleMovieByTitle(ctx context.Context, in *ByTitle, opts ...grpc.CallOption) (*MovieResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/movie.metadata.service.v1.MovieService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SearchMovies(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*MovieSearchResults, error) {
	out := new(MovieSearchResults)
	err := c.cc.Invoke(ctx, "/movie.metadata.service.v1.MovieService/SearchMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetSingleMovieByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, "/movie.metadata.service.v1.MovieService/GetSingleMovieByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetSingleMovieByTitle(ctx context.Context, in *ByTitle, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, "/movie.metadata.service.v1.MovieService/GetSingleMovieByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	Ping(context.Context, *Empty) (*Pong, error)
	SearchMovies(context.Context, *SearchQuery) (*MovieSearchResults, error)
	GetSingleMovieByID(context.Context, *ByID) (*MovieResponse, error)
	GetSingleMovieByTitle(context.Context, *ByTitle) (*MovieResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) Ping(context.Context, *Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMovieServiceServer) SearchMovies(context.Context, *SearchQuery) (*MovieSearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetSingleMovieByID(context.Context, *ByID) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleMovieByID not implemented")
}
func (UnimplementedMovieServiceServer) GetSingleMovieByTitle(context.Context, *ByTitle) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleMovieByTitle not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.metadata.service.v1.MovieService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SearchMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SearchMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.metadata.service.v1.MovieService/SearchMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SearchMovies(ctx, req.(*SearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetSingleMovieByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetSingleMovieByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.metadata.service.v1.MovieService/GetSingleMovieByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetSingleMovieByID(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetSingleMovieByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetSingleMovieByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.metadata.service.v1.MovieService/GetSingleMovieByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetSingleMovieByTitle(ctx, req.(*ByTitle))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.metadata.service.v1.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MovieService_Ping_Handler,
		},
		{
			MethodName: "SearchMovies",
			Handler:    _MovieService_SearchMovies_Handler,
		},
		{
			MethodName: "GetSingleMovieByID",
			Handler:    _MovieService_GetSingleMovieByID_Handler,
		},
		{
			MethodName: "GetSingleMovieByTitle",
			Handler:    _MovieService_GetSingleMovieByTitle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie/delivery/grpc/proto/v1/movie-service.proto",
}
